// Main JavaScript for Portfolio Website

// Skills Data Structure
const skillsData = {
    python: {
        name: 'Python',
        icon: `<path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" stroke="currentColor" stroke-width="2" fill="none"/>`,
        subSkills: [
            { name: 'Pandas', icon: 'üìä' },
            { name: 'NumPy', icon: 'üî¢' },
            { name: 'FastAPI', icon: '‚ö°' },
            { name: 'Flask', icon: 'üç∂' },
            { name: 'Matplotlib', icon: 'üìà' },
            { name: 'IBAPI', icon: 'üìà' }
        ]
    },
    javascript: {
        name: 'JavaScript',
        icon: `<path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" stroke="currentColor" stroke-width="2" fill="none"/>`,
        subSkills: [
            { name: 'React', icon: '‚öõÔ∏è' },
            { name: 'Node.js', icon: 'üü¢' },
            { name: 'Next.js', icon: '‚ö°' }
        ]
    },
    aws: {
        name: 'AWS',
        icon: `<path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" stroke="currentColor" stroke-width="2" fill="none"/>`,
        subSkills: [
            { name: 'Lambda', icon: 'Œª' },
            { name: 'CodePipeline', icon: 'üîó' },
            { name: 'CodeBuild', icon: 'üî®' },
            { name: 'CodeDeploy', icon: 'üöÄ' },
            { name: 'SES', icon: 'üìß' },
            { name: 'EC2', icon: 'üñ•Ô∏è' },
            { name: 'S3', icon: 'ü™£' },
            { name: 'RDS', icon: 'üóÑÔ∏è' },
            { name: 'DynamoDB', icon: '‚ö°' },
            { name: 'VPC', icon: 'üåê' }
        ]
    },
    docker: {
        name: 'Docker',
        icon: `<path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" stroke="currentColor" stroke-width="2" fill="none"/>`,
        subSkills: []
    },
    sql: {
        name: 'SQL',
        icon: `<path d="M4 7h16M4 11h16M4 15h16M4 19h16" stroke="currentColor" stroke-width="2" fill="none"/>`,
        subSkills: [
            { name: 'PostgreSQL', icon: 'üêò' },
            { name: 'MySQL', icon: 'üê¨' }
        ]
    },
    solidity: {
        name: 'Solidity',
        icon: `<path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" stroke="currentColor" stroke-width="2" fill="none"/>`,
        subSkills: []
    }
};

// Initialize AOS (Animate On Scroll)
AOS.init({
    duration: 800,
    easing: 'ease-out-cubic',
    once: true,
    offset: 100
});

// Theme Management
class ThemeManager {
    constructor() {
        this.theme = localStorage.getItem('theme') || 'light';
        this.init();
    }

    init() {
        this.applyTheme();
        this.setupEventListeners();
    }

    applyTheme() {
        document.documentElement.setAttribute('data-theme', this.theme);
        localStorage.setItem('theme', this.theme);
    }

    toggleTheme() {
        this.theme = this.theme === 'light' ? 'dark' : 'light';
        this.applyTheme();
    }

    setupEventListeners() {
        const themeToggle = document.querySelector('.theme-toggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', () => this.toggleTheme());
        }
    }
}

// Language Management
class LanguageManager {
    constructor() {
        this.currentLang = 'en';
        this.translations = {
            en: {
                name: 'Mihir Sampat',
                nav: {
                    home: 'Home',
                    about: 'About',
                    projects: 'Projects',
                    experience: 'Experience',
                    contact: 'Contact'
                },
                hero: {
                    title: 'Mihir Sampat',
                    subtitle: 'Software Engineer & Problem Solver',
                    cta: 'View my work'
                },
                skills: {
                    title: 'Skills & Technologies',
                    subtitle: 'Technologies I work with to build scalable solutions'
                },
                about: {
                    title: 'About Me',
                    bio: {
                        1: "I'm a passionate software engineer with 7 years of experience building scalable solutions and solving complex problems. My journey in technology has taken me from web development to blockchain and cloud infrastructure.",
                        2: "I specialize in Python development, particularly with FastAPI for building high-performance APIs, and have extensive experience with AWS cloud services and PostgreSQL databases.",
                        3: "When I'm not coding, you'll find me tending to my mango grove or exploring new technologies. I believe in writing clean, maintainable code and creating solutions that make a real impact."
                    },
                    facts: {
                        age: 'Age 30',
                        location: 'Mumbai, India',
                        experience: '7 yrs experience',
                        grove: 'Owns a mango grove'
                    }
                },
                projects: {
                    title: 'Featured Projects',
                    demo: 'Live Demo',
                    repo: 'Repo',
                    project1: {
                        title: 'E-Commerce API Platform',
                        description: 'A high-performance REST API built with FastAPI, featuring user authentication, product management, and payment processing with PostgreSQL and Redis caching.'
                    },
                    project2: {
                        title: 'DeFi Yield Farming Protocol',
                        description: 'A decentralized finance protocol for yield farming with smart contracts written in Solidity, featuring liquidity pools and automated market making.'
                    },
                    project3: {
                        title: 'Serverless Data Pipeline',
                        description: 'A serverless data processing pipeline using AWS Lambda, S3, and DynamoDB for real-time analytics and reporting with automated scaling.'
                    }
                },
                experience: {
                    title: 'Experience',
                    job1: {
                        title: 'Senior Software Engineer',
                        company: 'TechCorp Solutions',
                        dates: '2022 - Present',
                        achievement1: 'Led development of microservices architecture serving 1M+ users',
                        achievement2: 'Implemented CI/CD pipelines reducing deployment time by 60%',
                        achievement3: 'Mentored 5 junior developers and conducted code reviews'
                    },
                    job2: {
                        title: 'Full Stack Developer',
                        company: 'StartupXYZ',
                        dates: '2020 - 2022',
                        achievement1: 'Built and deployed 3 major features from concept to production',
                        achievement2: 'Optimized database queries improving performance by 40%',
                        achievement3: 'Collaborated with design team to implement responsive UI/UX'
                    },
                    job3: {
                        title: 'Junior Developer',
                        company: 'Digital Innovations',
                        dates: '2018 - 2020',
                        achievement1: 'Developed REST APIs and frontend components',
                        achievement2: 'Participated in agile development cycles',
                        achievement3: 'Contributed to open source projects'
                    }
                },
                contact: {
                    title: 'Get In Touch',
                    form: {
                        name: 'Name',
                        email: 'Email',
                        message: 'Message',
                        submit: 'Send Message'
                    },
                    resume: 'Download R√©sum√©'
                },
                footer: {
                    copyright: '¬© 2025 Mihir Sampat'
                }
            },
            hi: {
                name: '‡§Æ‡§ø‡§π‡§ø‡§∞ ‡§∏‡§Ç‡§™‡§§',
                nav: {
                    home: '‡§π‡•ã‡§Æ',
                    about: '‡§Æ‡•á‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç',
                    projects: '‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü‡•ç‡§∏',
                    experience: '‡§Ö‡§®‡•Å‡§≠‡§µ',
                    contact: '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï'
                },
                hero: {
                    title: '‡§Æ‡§ø‡§π‡§ø‡§∞ ‡§∏‡§Ç‡§™‡§§',
                    subtitle: '‡§∏‡•â‡§´‡•ç‡§ü‡§µ‡•á‡§Ø‡§∞ ‡§á‡§Ç‡§ú‡•Ä‡§®‡§ø‡§Ø‡§∞ ‡§î‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®‡§ï‡§∞‡•ç‡§§‡§æ',
                    cta: '‡§Æ‡•á‡§∞‡§æ ‡§ï‡§æ‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç'
                },
                skills: {
                    title: '‡§ï‡•å‡§∂‡§≤ ‡§î‡§∞ ‡§§‡§ï‡§®‡•Ä‡§ï‡•á‡§Ç',
                    subtitle: '‡§Æ‡•à‡§Ç ‡§∏‡•ç‡§ï‡•á‡§≤‡•á‡§¨‡§≤ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§ø‡§® ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç'
                },
                about: {
                    title: '‡§Æ‡•á‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç',
                    bio: {
                        1: "‡§Æ‡•à‡§Ç ‡§è‡§ï ‡§ú‡•Å‡§®‡•Ç‡§®‡•Ä ‡§∏‡•â‡§´‡•ç‡§ü‡§µ‡•á‡§Ø‡§∞ ‡§á‡§Ç‡§ú‡•Ä‡§®‡§ø‡§Ø‡§∞ ‡§π‡•Ç‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§∏‡•ç‡§ï‡•á‡§≤‡•á‡§¨‡§≤ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§¨‡§®‡§æ‡§®‡•á ‡§î‡§∞ ‡§ú‡§ü‡§ø‡§≤ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§π‡§≤ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç 7 ‡§∏‡§æ‡§≤ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§π‡•à‡•§ ‡§™‡•ç‡§∞‡•å‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï‡•Ä ‡§Æ‡•á‡§Ç ‡§Æ‡•á‡§∞‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§®‡•á ‡§Æ‡•Å‡§ù‡•á ‡§µ‡•á‡§¨ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§∏‡•á ‡§¨‡•ç‡§≤‡•â‡§ï‡§ö‡•á‡§® ‡§î‡§∞ ‡§ï‡•ç‡§≤‡§æ‡§â‡§° ‡§á‡§®‡•ç‡§´‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞ ‡§§‡§ï ‡§≤‡•á ‡§ú‡§æ‡§Ø‡§æ ‡§π‡•à‡•§",
                        2: "‡§Æ‡•à‡§Ç ‡§™‡§æ‡§Ø‡§•‡§® ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ ‡§∞‡§ñ‡§§‡§æ ‡§π‡•Ç‡§Ç, ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§â‡§ö‡•ç‡§ö-‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® API ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è FastAPI ‡§ï‡•á ‡§∏‡§æ‡§•, ‡§î‡§∞ AWS ‡§ï‡•ç‡§≤‡§æ‡§â‡§° ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§î‡§∞ PostgreSQL ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§π‡•à‡•§",
                        3: "‡§ú‡§¨ ‡§Æ‡•à‡§Ç ‡§ï‡•ã‡§°‡§ø‡§Ç‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•ã‡§§‡§æ, ‡§§‡•ã ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§™‡§®‡•á ‡§Ü‡§Æ ‡§ï‡•á ‡§¨‡§æ‡§ó ‡§ï‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§∞‡§§‡•á ‡§Ø‡§æ ‡§®‡§à ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡§§‡•á ‡§™‡§æ‡§è‡§Ç‡§ó‡•á‡•§ ‡§Æ‡•à‡§Ç ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ, ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡•ã‡§° ‡§≤‡§ø‡§ñ‡§®‡•á ‡§î‡§∞ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§°‡§æ‡§≤‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§"
                    },
                    facts: {
                        age: '‡§â‡§Æ‡•ç‡§∞ 30',
                        location: '‡§Æ‡•Å‡§Ç‡§¨‡§à, ‡§≠‡§æ‡§∞‡§§',
                        experience: '7 ‡§∏‡§æ‡§≤ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ',
                        grove: '‡§Ü‡§Æ ‡§ï‡§æ ‡§¨‡§æ‡§ó ‡§π‡•à'
                    }
                },
                projects: {
                    title: '‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü‡•ç‡§∏',
                    demo: '‡§≤‡§æ‡§á‡§µ ‡§°‡•á‡§Æ‡•ã',
                    repo: '‡§∞‡§ø‡§™‡•â‡§ú‡§ø‡§ü‡§∞‡•Ä',
                    project1: {
                        title: '‡§à-‡§ï‡•â‡§Æ‡§∞‡•ç‡§∏ API ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ',
                        description: 'FastAPI ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§è‡§ï ‡§â‡§ö‡•ç‡§ö-‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® REST API, ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç PostgreSQL ‡§î‡§∞ Redis ‡§ï‡•à‡§∂‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§∏‡§æ‡§• ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£, ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§î‡§∞ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡•§'
                    },
                    project2: {
                        title: 'DeFi ‡§Ø‡•Ä‡§≤‡•ç‡§° ‡§´‡§æ‡§∞‡•ç‡§Æ‡§ø‡§Ç‡§ó ‡§™‡•ç‡§∞‡•ã‡§ü‡•ã‡§ï‡•â‡§≤',
                        description: 'Solidity ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§ñ‡•á ‡§ó‡§è ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡•â‡§®‡•ç‡§ü‡•ç‡§∞‡•à‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ø‡•Ä‡§≤‡•ç‡§° ‡§´‡§æ‡§∞‡•ç‡§Æ‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§µ‡§ø‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡•Ä‡§ï‡•É‡§§ ‡§µ‡§ø‡§§‡•ç‡§§ ‡§™‡•ç‡§∞‡•ã‡§ü‡•ã‡§ï‡•â‡§≤, ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§§‡§∞‡§≤‡§§‡§æ ‡§™‡•Ç‡§≤ ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡•§'
                    },
                    project3: {
                        title: '‡§∏‡§∞‡•ç‡§µ‡§∞‡§≤‡•á‡§∏ ‡§°‡•á‡§ü‡§æ ‡§™‡§æ‡§á‡§™‡§≤‡§æ‡§á‡§®',
                        description: 'AWS Lambda, S3, ‡§î‡§∞ DynamoDB ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§∞‡•Ä‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏ ‡§î‡§∞ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∏‡§∞‡•ç‡§µ‡§∞‡§≤‡•á‡§∏ ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§™‡§æ‡§á‡§™‡§≤‡§æ‡§á‡§® ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∏‡•ç‡§ï‡•á‡§≤‡§ø‡§Ç‡§ó ‡§π‡•à‡•§'
                    }
                },
                experience: {
                    title: '‡§Ö‡§®‡•Å‡§≠‡§µ',
                    job1: {
                        title: '‡§∏‡•Ä‡§®‡§ø‡§Ø‡§∞ ‡§∏‡•â‡§´‡•ç‡§ü‡§µ‡•á‡§Ø‡§∞ ‡§á‡§Ç‡§ú‡•Ä‡§®‡§ø‡§Ø‡§∞',
                        company: '‡§ü‡•á‡§ï‡§ï‡•â‡§∞‡•ç‡§™ ‡§∏‡•â‡§≤‡•ç‡§Ø‡•Ç‡§∂‡§Ç‡§∏',
                        dates: '2022 - ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§®',
                        achievement1: '1M+ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§∏‡§∞‡•ç‡§µ‡§ø‡§∏ ‡§Ü‡§∞‡•ç‡§ï‡§ø‡§ü‡•á‡§ï‡•ç‡§ö‡§∞ ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§ï‡§ø‡§Ø‡§æ',
                        achievement2: 'CI/CD ‡§™‡§æ‡§á‡§™‡§≤‡§æ‡§á‡§® ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡•Ä ‡§ú‡§ø‡§∏‡§∏‡•á ‡§°‡§ø‡§™‡•ç‡§≤‡•â‡§Ø‡§Æ‡•á‡§Ç‡§ü ‡§∏‡§Æ‡§Ø 60% ‡§ï‡§Æ ‡§π‡•ã ‡§ó‡§Ø‡§æ',
                        achievement3: '5 ‡§ú‡•Ç‡§®‡§ø‡§Ø‡§∞ ‡§°‡•á‡§µ‡§≤‡§™‡§∞‡•ç‡§∏ ‡§ï‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§î‡§∞ ‡§ï‡•ã‡§° ‡§∞‡§ø‡§µ‡•ç‡§Ø‡•Ç ‡§Ü‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§ø‡§è'
                    },
                    job2: {
                        title: '‡§´‡•Å‡§≤ ‡§∏‡•ç‡§ü‡•à‡§ï ‡§°‡•á‡§µ‡§≤‡§™‡§∞',
                        company: '‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü‡§Ö‡§™XYZ',
                        dates: '2020 - 2022',
                        achievement1: '‡§ï‡•â‡§®‡•ç‡§∏‡•á‡§™‡•ç‡§ü ‡§∏‡•á ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§∂‡§® ‡§§‡§ï 3 ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§´‡•Ä‡§ö‡§∞‡•ç‡§∏ ‡§¨‡§®‡§æ‡§è ‡§î‡§∞ ‡§°‡§ø‡§™‡•ç‡§≤‡•â‡§Ø ‡§ï‡§ø‡§è',
                        achievement2: '‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä‡§ú‡§º ‡§ï‡•ã ‡§ë‡§™‡•ç‡§ü‡§ø‡§Æ‡§æ‡§á‡§ú‡§º ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§ø‡§∏‡§∏‡•á ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® 40% ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•Å‡§Ü',
                        achievement3: '‡§∞‡•á‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏‡§ø‡§µ UI/UX ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ü‡•Ä‡§Æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§π‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ'
                    },
                    job3: {
                        title: '‡§ú‡•Ç‡§®‡§ø‡§Ø‡§∞ ‡§°‡•á‡§µ‡§≤‡§™‡§∞',
                        company: '‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§á‡§®‡•ã‡§µ‡•á‡§∂‡§Ç‡§∏',
                        dates: '2018 - 2020',
                        achievement1: 'REST API ‡§î‡§∞ ‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü‡•ç‡§∏ ‡§µ‡§ø‡§ï‡§∏‡§ø‡§§ ‡§ï‡§ø‡§è',
                        achievement2: '‡§è‡§ú‡§æ‡§á‡§≤ ‡§°‡•á‡§µ‡§≤‡§™‡§Æ‡•á‡§Ç‡§ü ‡§∏‡§æ‡§á‡§ï‡§≤ ‡§Æ‡•á‡§Ç ‡§≠‡§æ‡§ó ‡§≤‡§ø‡§Ø‡§æ',
                        achievement3: '‡§ì‡§™‡§® ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‡§¶‡§ø‡§Ø‡§æ'
                    }
                },
                contact: {
                    title: '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç',
                    form: {
                        name: '‡§®‡§æ‡§Æ',
                        email: '‡§à‡§Æ‡•á‡§≤',
                        message: '‡§∏‡§Ç‡§¶‡•á‡§∂',
                        submit: '‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç'
                    },
                    resume: '‡§∞‡§ø‡§ú‡•ç‡§Ø‡•Ç‡§Æ‡•á ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç'
                },
                footer: {
                    copyright: '¬© 2025 ‡§Æ‡§ø‡§π‡§ø‡§∞ ‡§∏‡§Ç‡§™‡§§'
                }
            }
        };
        this.init();
    }

    init() {
        this.setupEventListeners();
    }

    changeLanguage(lang) {
        this.currentLang = lang;
        this.updateContent();
        this.updateLanguageButton();
    }

    updateContent() {
        const elements = document.querySelectorAll('[data-i18n]');
        elements.forEach(element => {
            const key = element.getAttribute('data-i18n');
            const translation = this.getTranslation(key);
            if (translation) {
                if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                    element.placeholder = translation;
                } else {
                    element.textContent = translation;
                }
            }
        });
    }

    getTranslation(key) {
        const keys = key.split('.');
        let translation = this.translations[this.currentLang];
        
        for (const k of keys) {
            if (translation && translation[k]) {
                translation = translation[k];
            } else {
                return null;
            }
        }
        
        return translation;
    }

    updateLanguageButton() {
        const currentLangElement = document.querySelector('.current-lang');
        if (currentLangElement) {
            currentLangElement.textContent = this.currentLang.toUpperCase();
        }
    }

    setupEventListeners() {
        const langOptions = document.querySelectorAll('.lang-option');
        langOptions.forEach(option => {
            option.addEventListener('click', () => {
                const lang = option.getAttribute('data-lang');
                this.changeLanguage(lang);
            });
        });
    }
}

// Smooth Scrolling
function setupSmoothScrolling() {
    const links = document.querySelectorAll('a[href^="#"]');
    
    links.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = link.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                const headerHeight = document.querySelector('.header').offsetHeight;
                const targetPosition = targetElement.offsetTop - headerHeight;
                
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// Navigation Active State
function setupNavigationActiveState() {
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link');
    
    function updateActiveNav() {
        const scrollPosition = window.scrollY + 100;
        
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.offsetHeight;
            const sectionId = section.getAttribute('id');
            
            if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href') === `#${sectionId}`) {
                        link.classList.add('active');
                    }
                });
            }
        });
    }
    
    window.addEventListener('scroll', updateActiveNav);
    updateActiveNav(); // Initial call
}

// Form Handling
class FormHandler {
    constructor() {
        this.form = document.querySelector('.contact-form');
        this.setupForm();
    }

    setupForm() {
        if (this.form) {
            this.form.addEventListener('submit', (e) => this.handleSubmit(e));
            this.setupFormValidation();
        }
    }

    setupFormValidation() {
        const inputs = this.form.querySelectorAll('input, textarea');
        
        inputs.forEach(input => {
            input.addEventListener('blur', () => this.validateField(input));
            input.addEventListener('input', () => this.clearError(input));
        });
    }

    validateField(field) {
        const value = field.value.trim();
        let isValid = true;
        let errorMessage = '';

        // Remove existing error
        this.clearError(field);

        // Validation rules
        if (field.type === 'email') {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(value)) {
                isValid = false;
                errorMessage = 'Please enter a valid email address';
            }
        }

        if (field.required && !value) {
            isValid = false;
            errorMessage = 'This field is required';
        }

        if (!isValid) {
            this.showError(field, errorMessage);
        }

        return isValid;
    }

    showError(field, message) {
        field.classList.add('error');
        
        const errorElement = document.createElement('div');
        errorElement.className = 'error-message';
        errorElement.textContent = message;
        
        field.parentNode.appendChild(errorElement);
    }

    clearError(field) {
        field.classList.remove('error');
        const errorElement = field.parentNode.querySelector('.error-message');
        if (errorElement) {
            errorElement.remove();
        }
    }

    async handleSubmit(e) {
        e.preventDefault();
        
        // Validate all fields
        const inputs = this.form.querySelectorAll('input, textarea');
        let isValid = true;
        
        inputs.forEach(input => {
            if (!this.validateField(input)) {
                isValid = false;
            }
        });

        if (!isValid) {
            return;
        }

        // Show loading state
        const submitButton = this.form.querySelector('button[type="submit"]');
        const originalText = submitButton.textContent;
        submitButton.textContent = 'Sending...';
        submitButton.disabled = true;

        try {
            const formData = new FormData(this.form);
            const response = await fetch(this.form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (response.ok) {
                this.showToast('Thanks! I\'ll reply soon.', 'success');
                this.form.reset();
            } else {
                throw new Error('Failed to send message');
            }
        } catch (error) {
            this.showToast('Sorry, something went wrong. Please try again.', 'error');
        } finally {
            submitButton.textContent = originalText;
            submitButton.disabled = false;
        }
    }
}

// Toast Notifications
class ToastManager {
    constructor() {
        this.toast = document.getElementById('toast');
    }

    show(message, type = 'info') {
        if (!this.toast) return;

        const messageElement = this.toast.querySelector('.toast-message');
        messageElement.textContent = message;

        // Set type-specific styling
        this.toast.className = `toast ${type}`;
        
        // Show toast
        this.toast.classList.add('show');

        // Auto-hide after 5 seconds
        setTimeout(() => {
            this.hide();
        }, 5000);
    }

    hide() {
        if (this.toast) {
            this.toast.classList.remove('show');
        }
    }
}

// Parallax Effect for Hero Portrait
function setupParallax() {
    const portrait = document.querySelector('.portrait-img');
    if (!portrait) return;

    window.addEventListener('mousemove', (e) => {
        const { clientX, clientY } = e;
        const { innerWidth, innerHeight } = window;
        
        const x = (clientX - innerWidth / 2) / innerWidth;
        const y = (clientY - innerHeight / 2) / innerHeight;
        
        portrait.style.transform = `translate(${x * 10}px, ${y * 10}px)`;
    });
}

// Mobile Menu Toggle
function setupMobileMenu() {
    const mobileToggle = document.querySelector('.mobile-menu-toggle');
    const nav = document.querySelector('.nav');
    
    if (mobileToggle && nav) {
        mobileToggle.addEventListener('click', () => {
            nav.classList.toggle('active');
            mobileToggle.classList.toggle('active');
        });

        // Close menu when clicking on a link
        const navLinks = nav.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            link.addEventListener('click', () => {
                nav.classList.remove('active');
                mobileToggle.classList.remove('active');
            });
        });
    }
}

// Utility Functions
function scrollToSection(sectionId) {
    const element = document.getElementById(sectionId);
    if (element) {
        const headerHeight = document.querySelector('.header').offsetHeight;
        const targetPosition = element.offsetTop - headerHeight;
        
        window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
        });
    }
}

// Skills Management
class SkillsManager {
    constructor() {
        this.currentExpanded = null;
        this.init();
    }

    init() {
        this.toPlainSkills(skillsData);
        this.renderSkills();
        this.setupEventListeners();
    }

    toPlainSkills(skillsData) {
        for (const key in skillsData) {
            if (skillsData[key].subSkills) {
                skillsData[key].subSkills = skillsData[key].subSkills.map(sub => ({ name: sub.name, icon: '' }));
            }
        }
    }

    renderSkills() {
        const container = document.getElementById('skillsContainer');
        if (!container) return;

        container.innerHTML = '';
        
        Object.entries(skillsData).forEach(([key, skill], index) => {
            const skillElement = this.createSkillElement(key, skill, index);
            container.appendChild(skillElement);
        });
    }

    createSkillElement(key, skill, index) {
        const skillDiv = document.createElement('div');
        skillDiv.className = 'skill-category';
        skillDiv.setAttribute('data-skill', key);
        skillDiv.setAttribute('data-aos', 'fade-up');
        skillDiv.setAttribute('data-aos-delay', (index + 1) * 100);

        const mainSkill = document.createElement('div');
        mainSkill.className = 'main-skill';
        mainSkill.innerHTML = `
            <svg class="main-skill-icon" width="28" height="28" viewBox="0 0 24 24">
                ${skill.icon}
            </svg>
            <span>${skill.name}</span>
        `;

        const subSkills = document.createElement('div');
        subSkills.className = 'sub-skills';
        
        if (skill.subSkills.length > 0) {
            const subSkillsGrid = document.createElement('div');
            subSkillsGrid.className = 'sub-skills-grid';
            
            skill.subSkills.forEach(subSkill => {
                const subSkillChip = document.createElement('div');
                subSkillChip.className = 'sub-skill-chip';
                subSkillChip.innerHTML =
                    (subSkill.icon ? `<span class="sub-skill-icon">${subSkill.icon}</span>` : '') +
                    `<span>${subSkill.name}</span>`;
                subSkillsGrid.appendChild(subSkillChip);
            });
            
            subSkills.appendChild(subSkillsGrid);
        }

        skillDiv.appendChild(mainSkill);
        skillDiv.appendChild(subSkills);

        return skillDiv;
    }

    setupEventListeners() {
        const container = document.getElementById('skillsContainer');
        if (!container) return;
        container.addEventListener('click', (e) => {
            const skillCategory = e.target.closest('.skill-category');
            if (skillCategory && container.contains(skillCategory)) {
                this.toggleSkill(skillCategory);
            }
        });
    }

    toggleSkill(skillCategory) {
        const subSkills = skillCategory.querySelector('.sub-skills');
        // If clicking the same category, collapse it only
        if (skillCategory.classList.contains('expanded')) {
            skillCategory.classList.remove('expanded');
            subSkills.classList.remove('expanded');
            this.currentExpanded = null;
        } else {
            // Collapse previously expanded category (if any)
            if (this.currentExpanded && this.currentExpanded !== skillCategory) {
                this.currentExpanded.classList.remove('expanded');
                this.currentExpanded.querySelector('.sub-skills').classList.remove('expanded');
            }
            // Expand current category
            skillCategory.classList.add('expanded');
            subSkills.classList.add('expanded');
            this.currentExpanded = skillCategory;
        }
    }
}

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Initialize managers
    const themeManager = new ThemeManager();
    const languageManager = new LanguageManager();
    const formHandler = new FormHandler();
    const toastManager = new ToastManager();
    const skillsManager = new SkillsManager();

    // Setup other functionality
    setupSmoothScrolling();
    setupNavigationActiveState();
    setupParallax();
    setupMobileMenu();

    // Make utilities globally available
    window.scrollToSection = scrollToSection;
    window.showToast = (message, type) => toastManager.show(message, type);
});

// Handle page visibility changes for better performance
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        // Pause animations when page is not visible
        document.body.classList.add('page-hidden');
    } else {
        document.body.classList.remove('page-hidden');
    }
});

// Preload critical images
function preloadImages() {
    const criticalImages = [
        'assets/portrait.jpg',
        'assets/portrait-large.jpg'
    ];
    
    criticalImages.forEach(src => {
        const img = new Image();
        img.src = src;
    });
}

// Call preload function
preloadImages(); 